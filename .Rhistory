install.packages("readxl")
logs <- read_csv("beelogger.csv")
library(tidyverse)
install.packages(tidyverse)
install.packages(readr)
install.packages("readr")
logs <- read_csv("beelogger.csv")
library(tidyverse)
logs <- read_csv("beelogger.csv")
install.packages("readr")
library(readr)
library(readxl)
logs <- read_csv("beelogger.csv")
logs <- read_csv("beelogger.csv")
View(logs)
View(logs)
hist(logs)
hist(logs$weight)
hist(logs$temp1)
hist(logs$temp2)
hist(logs$hum1)
hist(logs$hum2
hist(logs$hum2)
hist(logs$hum2)
hist(logs$weight)
hist(logs$hum2)
hist(logs$hum1)
hist(logs$weight)
require(ggplo2)
require(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(logs)+geom_point(aes(x=Frequency,y=Intervall))
ggplot(logs)+geom_point(aes(x=weight,y=timestamp)
ggplot(logs)+geom_point(aes(x=weight,y=timestamp)
;
ggplot(logs)+geom_point(aes(x=weight,y=timestamp))
)
ggplot(logs)+geom_point(aes(x=weight,y=timestamp))
ggplot(logs)
was
;;
ggplot(logs)+geom_point(aes(x=weight,y=temp1))
ggplot(logs)+geom_point(aes(x=hum1,y=temp1))
ggplot(logs)+geom_point(aes(x=temp2,y=temp1))
ggplot(logs)+geom_point(aes(x=weight,y=temp1))
ggplot(logs)+geom_point(aes(x=weight,y=temp2))
ggplot(logs)+geom_point(aes(x=weight,y=hum2))
ggplot(logs)+geom_point(aes(x=x8,y=hum2))
ggplot(logs)+geom_point(aes(x=x7,y=temp1))
ggplot(logs)+geom_point(aes(x=x7,y=temp2))
ggplot(logs)+geom_point(aes(x=x7,y=weight))
ggplot(logs)+geom_point(aes(x=x8,y=weight))
ggplot(logs)+geom_point(aes(x=x7,y=weight))
save.image("~/Projects/R/Logs.RData")
savehistory("~/Projects/R/Logs.Rhistory")
install.packages(c("cluster", "nlme"))
runapp
shiny::runApp()
View(mtcars)
str(cor(mtcars))
cor(mtcars$mpg, mtcars$hp, method = "spearman")
require(corrgram)
install.packages("corrgram")
require(corrgram)
corrgram(mtcars)
ggplot(mtcars)+geom_point(aes(x=disp,y=wt))
ggplot2(mtcars)+geom_point(aes(x=disp,y=wt))
require(ggplot2)
ggplot(mtcars)+geom_point(aes(x=disp,y=wt))
install.packages("tidyverse")
ggplot(mtcars)+geom_point(aes(x=disp,y=wt, col=cyl))
ggplot(mtcars)+geom_point(aes(x=disp,y=wt, col=cas.factor(cyl)))
ggplot(mtcars)+geom_point(aes(x=disp,y=wt, col=as.factor(cyl)))
ggplot(mtcars)+geom_point(aes(x=disp,y=wt, col=cyl))
install.packages("readxl")
install.packages(tidyverse)
library(tidyverse)
install.packages("readr")
library(readr)
library(readxl)
logs <- read_csv("beehive.csv")
View(logs)
hist(logs)
hist(logs$weight)
hist(logs$temp1)
hist(logs$temp2)
hist(logs$hum1)
install.packages("ggplot2")
library(ggplot2)
ggplot(logs)+geom_point(aes(x=weight,y=hum2))
install.packages("readr")
install.packages("ggplot2")
ggplot(mtcars)+geom_point(aes(x=disp,y=wt, col=as.factor(cyl), size=mpg))
lm(data=mtcars,mpg-hp)
lm(data=mtcars,mpg˜hp)
lm(data=mtcars,mpg~hp)
lm(data=mtcars,mpg~hp)
ggplot(mtcars)+geom_point(aes(x=disp,y=wt, col=as.factor(cyl), size=mpg))
lm(data=mtcars,mpg~hp)
fit<-lm(data=mtcars,mpg~hp)
summary(fit)
plot(data=mtcars,mpg~hp)
abline(fit)
View(mtcars)
ggplot(mtcars, aes(x=hp,y=mpg))+geom_point()+geom_smooth(method=lm)
# abschätzung wie streuen meine punkte um meine gerade heraus
ggplot(mtcars, aes(x=hp,y=mpg))+geom_point()+geom_smooth(method="lm", se= FALSE)
require(DBI)
con<-dbConnect(RSQLite::SQLite(),file.choose())
dbListTables(con)
daten<-dbReadTable(con, "rteu_logger_data")
daten<-dbReadTable(con, "rteu_logger_data")
require(DBI)
con<-dbConnect(RSQLite::SQLite(),file.choose())
dbListTables(con)
daten<-dbReadTable(con, "rteu_logger_data")
ggplot(daten)+geom_point(aes(x=duration,y=signal_freq))
ggplot(daten)+geom_point(aes(x=timestamp,y=signal_freq))
ggplot(daten)+geom_point(aes(x=timestamp,y=signal_bw))
ggplot(daten)+geom_point(aes(x=duration,y=signal_bw))
ggplot(daten)+geom_point(aes(x=signal_freq,y=signal_bw))
ggplot(daten)+geom_point(aes(x=max_signal,y=signal_bw))
abline(daten)
(daten)
require(DBI)
con<-dbConnect(RSQLite::SQLite(),file.choose())
dbListTables(con)
daten<-dbReadTable(con, "rteu_logger_data")
# zeichen
ggplot(daten)+geom_point(aes(x=max_signal,y=signal_bw))
lm(data=daten,mpg~hp)
fit<-lm(data=daten,mpg~hp)
summary(fit)
# zeichen
ggplot(daten)+geom_point(aes(x=max_signal,y=signal_bw))
lm(data=daten,mpg~hp)
fit<-lm(data=daten,mpg~hp)
summary(fit)
ggplot(daten, aes(x=max_signal,y=signal_bw))+geom_point()+geom_smooth(method="lm", se=FALSE)
ggplot(daten, aes(x=max_signal,y=signal_bw))+geom_point()+geom_smooth(method="ml", se=FALSE)
# lineare regression
ggplot(daten, aes(x=max_signal,y=signal_bw))+geom_point()+geom_smooth(, se=FALSE)
# lineare regression
ggplot(daten, aes(x=max_signal,y=signal_bw))+geom_point()+geom_smooth(method="loess", se=FALSE)
str(cor(daten))
cor(daten$max_signal, daten$signal_bw, method = "spearman")
corrgram(daten)
cor(daten$max_signal, daten$signal_bw, method = "spearman")
require(DBI)
str(cor(daten))
str(cor(daten))
lm(data=daten,max_signal~signal_bw)
fit<-lm(data=max_signal,max_signal~signal_bw)
summary(fit)
lm(data=daten,max_signal~signal_bw)
fit<-lm(data=max_signal,max_signal~signal_bw)
require(DBI)
con<-dbConnect(RSQLite::SQLite(),file.choose())
dbListTables(con)
daten<-dbReadTable(con, "rteu_logger_data")
# zeichen
ggplot(daten)+geom_point(aes(x=max_signal,y=signal_bw))
# lineare regression
ggplot(daten, aes(x=max_signal,y=signal_bw))+geom_point()+geom_smooth(method="loess", se=FALSE)
lm(data=daten,max_signal~signal_bw)
fit<-lm(data=max_signal,max_signal~signal_bw)
summary(fit)
# lineare regression
ggplot(daten, aes(x=max_signal,y=signal_bw))+geom_point()+geom_smooth(method="ml", se=FALSE)
require(DBI)
ggplot(daten, aes(x=max_signal,y=signal_bw))+geom_point()+geom_smooth(method="lm", se=FALSE)
lm(data=daten,max_signal~signal_bw)
fit2<-lm(data=max_signal,max_signal~signal_bw)
summary(fit2)
lm(data=daten,max_signal~signal_bw)
fit2<-lm(data=daten,max_signal~signal_bw)
summary(fit2)
lm(data=daten,max_signal~signal_bw)
fit2<-lm(data=daten,max_signal~signal_bw)
summary(fit2)
abline(fit2)
plot(data=daten,max_signal~signal_bw)
lm(data=daten,max_signal~signal_bw)
fit2<-lm(data=daten,max_signal~signal_bw)
summary(fit2)
plot(data=daten,max_signal~signal_bw)
abline(fit2)
library(tidyverse)
library(readr)
library(readxl)
library(ggplot2)
daten <- read_csv("beehive_small.csv")
View(daten)
ggplot(daten)+geom_histogram(aes(timestamp))
library(tidyverse)
library(readr)
library(readxl)
library(ggplot2)
daten <- read_csv("beehive_small.csv")
View(daten)
ggplot(daten)+geom_histogram(aes(timestamp))
ggplot(daten)+geom_histogram(aes(daten$timestamp))
ggplot(daten)+geom_histogram(aes(ticks))
tmp<-as.POSIXct(daten$tciks, origin="1970")
tmp<-as.POSIXct(daten$ticks, origin="1970")
tmp<-as.POSIXct(daten$ticks, origin="1970-1-1")
ggplot(daten)+geom_histogram(aes(weight))
ggplot(daten)+geom_bar(aes(weight))
ggplot(daten)+geom_bar(aes(temp1))
ggplot(daten)+geom_point(aes(x=timestamp,y=weight))
cor(daten)
cor(daten[,c("weight", "temp1", "temp2", "hum1", "ticks")])
ggplot(daten)+geom_point(aes(x=ticks,y=temp1, col=as.factor(weight)))
